// <auto-generated />
using System;
using EMS.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EMS.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.10");

            modelBuilder.Entity("EMS.Core.Models.Notification", b =>
                {
                    b.Property<int>("notificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("creationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("isActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("terminationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("userID")
                        .HasColumnType("INTEGER");

                    b.HasKey("notificationID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("EMS.Core.Models.SoilData", b =>
                {
                    b.Property<int>("sampleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("contaminants")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("date")
                        .HasColumnType("TEXT");

                    b.Property<float>("density")
                        .HasColumnType("REAL");

                    b.Property<int>("firmness")
                        .HasColumnType("INTEGER");

                    b.Property<string>("microbiology")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("moisture")
                        .HasColumnType("REAL");

                    b.Property<float>("nitrogen")
                        .HasColumnType("REAL");

                    b.Property<float>("organicMatter")
                        .HasColumnType("REAL");

                    b.Property<float>("pH")
                        .HasColumnType("REAL");

                    b.HasKey("sampleID");

                    b.ToTable("SoilSamples");
                });

            modelBuilder.Entity("EMS.Core.Models.Species", b =>
                {
                    b.Property<int>("speciesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("speciesName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("speciesID");

                    b.ToTable("Species");
                });

            modelBuilder.Entity("EMS.Core.Models.SpeciesData", b =>
                {
                    b.Property<int>("sampleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("additionalNotes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("date")
                        .HasColumnType("TEXT");

                    b.Property<string>("healthConcerns")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("knownHabitats")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("populationCount")
                        .HasColumnType("INTEGER");

                    b.Property<float>("reproductiveFactor")
                        .HasColumnType("REAL");

                    b.Property<int>("scatCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("speciesID")
                        .HasColumnType("INTEGER");

                    b.HasKey("sampleID");

                    b.HasIndex("speciesID");

                    b.ToTable("SpeciesData");
                });

            modelBuilder.Entity("EMS.Core.Models.User", b =>
                {
                    b.Property<int>("userID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("assignedZone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("userID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EMS.Core.Models.UserTask", b =>
                {
                    b.Property<int>("taskID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("creationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("isActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("userID")
                        .HasColumnType("INTEGER");

                    b.HasKey("taskID");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("EMS.Core.Models.WaterData", b =>
                {
                    b.Property<int>("sampleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("contaminants")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("date")
                        .HasColumnType("TEXT");

                    b.Property<float>("dissolvedOxygen")
                        .HasColumnType("REAL");

                    b.Property<float>("eutrophicPotential")
                        .HasColumnType("REAL");

                    b.Property<float>("hardness")
                        .HasColumnType("REAL");

                    b.Property<string>("microbiology")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("pH")
                        .HasColumnType("REAL");

                    b.Property<float>("salinity")
                        .HasColumnType("REAL");

                    b.Property<float>("turbidity")
                        .HasColumnType("REAL");

                    b.HasKey("sampleID");

                    b.ToTable("WaterSamples");
                });

            modelBuilder.Entity("EMS.Core.Models.SpeciesData", b =>
                {
                    b.HasOne("EMS.Core.Models.Species", "species")
                        .WithMany()
                        .HasForeignKey("speciesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("species");
                });
#pragma warning restore 612, 618
        }
    }
}
